/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = "base" | "blank";

  /**
   * route map
   */
  export type RouteMap = {
    "root": "/";
    "not-found": "/:pathMatch(.*)*";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "crypto": "/crypto";
    "crypto_coin": "/crypto/coin";
    "crypto_futures": "/crypto/futures";
    "crypto_spot": "/crypto/spot";
    "crypto_symbol": "/crypto/symbol";
    "etf": "/etf";
    "etf_config": "/etf/config";
    "etf_product": "/etf/product";
    "financial": "/financial";
    "financial_order": "/financial/order";
    "financial_product": "/financial/product";
    "flow": "/flow";
    "flow_futures": "/flow/futures";
    "flow_loan": "/flow/loan";
    "flow_spot": "/flow/spot";
    "flow_stock": "/flow/stock";
    "home": "/home";
    "iframe-page": "/iframe-page/:url";
    "login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?";
    "manage": "/manage";
    "manage_manage": "/manage/manage";
    "manage_menu": "/manage/menu";
    "manage_role": "/manage/role";
    "money": "/money";
    "money_despoit": "/money/despoit";
    "money_spot-despoit": "/money/spot-despoit";
    "money_spot-withdraw": "/money/spot-withdraw";
    "money_stock-withdraw": "/money/stock-withdraw";
    "order": "/order";
    "order_etf": "/order/etf";
    "order_futures": "/order/futures";
    "order_ipo": "/order/ipo";
    "order_loan": "/order/loan";
    "order_otc": "/order/otc";
    "order_spot": "/order/spot";
    "order_stock": "/order/stock";
    "order_tagesstrategie": "/order/tagesstrategie";
    "stock": "/stock";
    "stock_ipo": "/stock/ipo";
    "stock_market": "/stock/market";
    "stock_otc": "/stock/otc";
    "user": "/user";
    "user_kyc": "/user/kyc";
    "user_level": "/user/level";
    "user_user-manage": "/user/user-manage";
    "wallet": "/wallet";
    "wallet_futures": "/wallet/futures";
    "wallet_loan": "/wallet/loan";
    "wallet_spot": "/wallet/spot";
    "wallet_stock": "/wallet/stock";
    "website": "/website";
    "website_announcement": "/website/announcement";
    "website_banner": "/website/banner";
    "website_config-page": "/website/config-page";
    "website_platform": "/website/platform";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "crypto"
    | "etf"
    | "financial"
    | "flow"
    | "home"
    | "iframe-page"
    | "login"
    | "manage"
    | "money"
    | "order"
    | "stock"
    | "user"
    | "wallet"
    | "website"
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "iframe-page"
    | "login"
    | "crypto_coin"
    | "crypto_futures"
    | "crypto_spot"
    | "crypto_symbol"
    | "etf_config"
    | "etf_product"
    | "financial_order"
    | "financial_product"
    | "flow_futures"
    | "flow_loan"
    | "flow_spot"
    | "flow_stock"
    | "home"
    | "manage_manage"
    | "manage_menu"
    | "manage_role"
    | "money_despoit"
    | "money_spot-despoit"
    | "money_spot-withdraw"
    | "money_stock-withdraw"
    | "order_etf"
    | "order_futures"
    | "order_ipo"
    | "order_loan"
    | "order_otc"
    | "order_spot"
    | "order_stock"
    | "order_tagesstrategie"
    | "stock_ipo"
    | "stock_market"
    | "stock_otc"
    | "user_kyc"
    | "user_level"
    | "user_user-manage"
    | "wallet_futures"
    | "wallet_loan"
    | "wallet_spot"
    | "wallet_stock"
    | "website_announcement"
    | "website_banner"
    | "website_config-page"
    | "website_platform"
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends `${K}_${infer R}`
    ? R extends `${string}_${string}`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}$view.${K}`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `view.${K}`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `layout.${RouteLayout}$view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: `layout.${RouteLayout}`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
